'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import {
  HomeIcon,
  FilmIcon,
  TvIcon,
  UserIcon,
  MagnifyingGlassIcon,
  HeartIcon,
  FireIcon,
  BellIcon,
  SwatchIcon,
} from '@heroicons/react/24/outline';

interface LayoutProps {
  children: React.ReactNode;
}

interface MenuItem {
  text: string;
  path: string;
  icon: React.ReactNode;
}

export default function Layout({ children }: LayoutProps) {
  const [currentTheme, setCurrentTheme] = useState('dark'); // ÈªòËÆ§Ê∑±Ëâ≤‰∏ªÈ¢ò
  const pathname = usePathname();
  const searchInputRef = React.useRef<HTMLInputElement>(null);

  // DaisyUI ÂèØÁî®‰∏ªÈ¢òÂàóË°®
  const themes = [
    { name: 'light', label: 'ÊµÖËâ≤', emoji: '‚òÄÔ∏è' },
    { name: 'dark', label: 'Ê∑±Ëâ≤', emoji: 'üåô' },
    { name: 'cupcake', label: 'Á∫∏ÊùØËõãÁ≥ï', emoji: 'üßÅ' },
    { name: 'bumblebee', label: 'Â§ßÈªÑËúÇ', emoji: 'üêù' },
    { name: 'emerald', label: 'Áø°Áø†', emoji: 'üíö' },
    { name: 'corporate', label: 'ÂïÜÂä°', emoji: 'üè¢' },
    { name: 'synthwave', label: 'ÂêàÊàêÊ≥¢', emoji: 'üåÜ' },
    { name: 'retro', label: 'Â§çÂè§', emoji: 'üìª' },
    { name: 'cyberpunk', label: 'ËµõÂçöÊúãÂÖã', emoji: 'ü§ñ' },
    { name: 'valentine', label: 'ÊÉÖ‰∫∫ËäÇ', emoji: 'üíñ' },
    { name: 'halloween', label: '‰∏áÂú£ËäÇ', emoji: 'üéÉ' },
    { name: 'garden', label: 'Ëä±Âõ≠', emoji: 'üåª' },
    { name: 'forest', label: 'Ê£ÆÊûó', emoji: 'üå≤' },
    { name: 'aqua', label: 'Êµ∑Ê¥ã', emoji: 'üåä' },
    { name: 'lofi', label: 'Lo-fi', emoji: 'üéµ' },
    { name: 'pastel', label: 'Á≤âÂΩ©', emoji: 'üé®' },
    { name: 'fantasy', label: 'ÂπªÊÉ≥', emoji: 'ü¶Ñ' },
    { name: 'wireframe', label: 'Á∫øÊ°Ü', emoji: 'üìê' },
    { name: 'black', label: 'Á∫ØÈªë', emoji: '‚ö´' },
    { name: 'luxury', label: 'Â•¢Âçé', emoji: 'üíé' },
    { name: 'dracula', label: 'Âæ∑Âè§Êãâ', emoji: 'üßõ' },
    { name: 'cmyk', label: 'CMYK', emoji: 'üñ®Ô∏è' },
    { name: 'autumn', label: 'ÁßãÂ≠£', emoji: 'üçÇ' },
    { name: 'business', label: 'ÂïÜ‰∏ö', emoji: 'üíº' },
    { name: 'acid', label: 'ÈÖ∏ÊÄß', emoji: 'üß™' },
    { name: 'lemonade', label: 'Êü†Ê™¨Ê∞¥', emoji: 'üçã' },
    { name: 'night', label: 'Â§úÊôö', emoji: 'üåÉ' },
    { name: 'coffee', label: 'ÂíñÂï°', emoji: '‚òï' },
    { name: 'winter', label: 'ÂÜ¨Â≠£', emoji: '‚ùÑÔ∏è' },
    { name: 'dim', label: 'ÊòèÊöó', emoji: 'üîÖ' },
    { name: 'nord', label: 'Nord', emoji: 'üèîÔ∏è' },
    { name: 'sunset', label: 'Êó•ËêΩ', emoji: 'üåÖ' },
  ];

  // DaisyUI ‰∏ªÈ¢òÂàáÊç¢ÈÄªËæë
  useEffect(() => {
    const html = document.documentElement;
    html.setAttribute('data-theme', currentTheme);
    // ‰øùÂ≠òÂà∞ localStorage
    localStorage.setItem('theme', currentTheme);
  }, [currentTheme]);

  // È°µÈù¢Âä†ËΩΩÊó∂ËØªÂèñ‰øùÂ≠òÁöÑ‰∏ªÈ¢ò
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme && themes.find(t => t.name === savedTheme)) {
      setCurrentTheme(savedTheme);
    }
  }, []);

  // ÈîÆÁõòÂø´Êç∑ÈîÆÁõëÂê¨
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // ‚åòK Êàñ Ctrl+K Âø´Êç∑ÈîÆ
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault();
        searchInputRef.current?.focus();
        searchInputRef.current?.select();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, []);

  const menuItems: MenuItem[] = [
    { text: 'È¶ñÈ°µ', path: '/', icon: <HomeIcon className="w-5 h-5" /> },
    { text: 'ÁÉ≠Èó®ÁîµÂΩ±', path: '/movies/popular', icon: <FireIcon className="w-5 h-5" /> },
    { text: 'ÁîµÂΩ±', path: '/movies', icon: <FilmIcon className="w-5 h-5" /> },
    { text: 'ÁîµËßÜÂâß', path: '/tv', icon: <TvIcon className="w-5 h-5" /> },
    { text: 'ÊºîÂëò', path: '/people', icon: <UserIcon className="w-5 h-5" /> },
    { text: 'ÊêúÁ¥¢', path: '/search', icon: <MagnifyingGlassIcon className="w-5 h-5" /> },
    { text: 'Êî∂Ëóè', path: '/favorites', icon: <HeartIcon className="w-5 h-5" /> },
  ];

  const isActivePath = (path: string) => {
    if (path === '/') return pathname === '/';
    return pathname.startsWith(path);
  };

  const handleThemeChange = (themeName: string) => {
    setCurrentTheme(themeName);
  };

  const currentThemeInfo = themes.find(t => t.name === currentTheme) || themes[1];

  return (
    <div className="flex flex-col h-screen bg-base-200">
      {/* 1. Top Bar (Fixed) */}
      <header className="navbar bg-base-100 border-b border-base-300 shadow-sm fixed top-0 left-0 right-0 z-30 h-16">
        {/* Logo */}
        <div className="navbar-start">
           <div className="flex items-center justify-center w-32 gap-2">
            <span className="text-xl">üé≠</span>
            <h1 className="text-xl font-bold text-primary hidden sm:block">TMDB</h1>
          </div>
        </div>

        {/* Search & Actions */}
        <div className="navbar-end gap-2">
          {/* Search Bar */}
          <div className="form-control hidden md:block mr-4">
            <label className="input input-bordered flex items-center gap-2 w-72">
              <svg className="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <g
                  strokeLinejoin="round"
                  strokeLinecap="round"
                  strokeWidth="2.5"
                  fill="none"
                  stroke="currentColor"
                >
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.3-4.3"></path>
                </g>
              </svg>
              <input 
                ref={searchInputRef}
                type="search" 
                className="grow" 
                placeholder="ÊêúÁ¥¢..." 
              />
              <kbd className="kbd kbd-sm">‚åò</kbd>
              <kbd className="kbd kbd-sm">K</kbd>
            </label>
          </div>

          {/* Theme Selector */}
          <div className="dropdown dropdown-end">
            <label tabIndex={0} className="btn btn-ghost btn-circle">
              <SwatchIcon className="h-6 w-6" />
            </label>
            <div tabIndex={0} className="dropdown-content z-[1] p-2 shadow-2xl bg-base-100 rounded-box w-80 max-h-96 overflow-y-auto">
              <div className="p-3 border-b border-base-300">
                <h3 className="font-bold text-sm text-base-content">ÈÄâÊã©‰∏ªÈ¢ò</h3>
                <p className="text-xs text-base-content/60 mt-1">ÂΩìÂâç: {currentThemeInfo.emoji} {currentThemeInfo.label}</p>
              </div>
              <div className="grid grid-cols-2 gap-2 p-3">
                {themes.map((theme) => (
                  <button
                    key={theme.name}
                    className={`btn btn-sm justify-start gap-2 ${
                      currentTheme === theme.name ? 'btn-primary' : 'btn-ghost'
                    }`}
                    onClick={() => handleThemeChange(theme.name)}
                  >
                    <span>{theme.emoji}</span>
                    <span className="text-xs">{theme.label}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Notifications */}
          <button className="btn btn-ghost btn-circle">
            <div className="indicator">
              <BellIcon className="h-6 w-6" />
              <span className="badge badge-xs badge-primary indicator-item"></span>
            </div>
          </button>

          {/* User Profile Dropdown */}
          <div className="dropdown dropdown-end">
            <label tabIndex={0} className="btn btn-ghost btn-circle avatar">
              <div className="w-10 rounded-full">
                <img src="https://i.pravatar.cc/150?u=a042581f4e29026704d" alt="User Avatar" />
              </div>
            </label>
            <ul tabIndex={0} className="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
              <li><a className="justify-between">‰∏™‰∫∫‰∏≠ÂøÉ <span className="badge">New</span></a></li>
              <li><a>ËÆæÁΩÆ</a></li>
              <li><a>ÈÄÄÂá∫</a></li>
            </ul>
          </div>
        </div>
      </header>

      {/* Content Area below Top Bar */}
      <div className="flex flex-1 pt-16 overflow-hidden">
        {/* 2. Left Navbar */}
        <aside className="w-48 bg-base-100 border-r border-base-300 hidden lg:block overflow-y-auto">
          <ul className="menu p-4 w-full text-base-content space-y-2">
            {menuItems.map((item) => (
              <li key={item.path}>
                <Link href={item.path} className={`${isActivePath(item.path) ? 'active' : ''} py-3 text-base font-medium`}>
                  {item.icon}
                  {item.text}
                </Link>
              </li>
            ))}
          </ul>
        </aside>

        {/* 3. Main Content */}
        <main className="flex-1 p-6 overflow-y-auto">
          {children}
        </main>
      </div>
    </div>
  );
}